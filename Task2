import matplotlib.pyplot as plt
import pandas as pd
import yfinance as yf
import joblib
from sklearn.metrics import mean_squared_error
from statsmodels.tsa.arima.model import ARIMA


# Step 1: Fetch historical stock data
def fetch_stock_data(ticke, start, end):
    data = yf.download(ticke, start=start, end=end)
    return data

# Step 2: Fit ARIMA model
def fit_arima_model(data, order):
    model = ARIMA(data['Close'], order=order)
    model_fit = model.fit()
    return model_fit

# Step 3: Plot predictions
def plot_predictions(data, forecast):
    plt.figure(figsize=(12, 6))
    plt.plot(data['Close'], label='Historical Prices', color='blue')
    plt.plot(forecast, label='Forecasted Prices', color='red')
    plt.title('Stock Price Forecast')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.legend()
    plt.show()

# Main function
if __name__ == "__main__":
    # Parameters
    ticker = 'AAPL'  # Example: Apple Inc.
    start_date = '2020-01-01'
    end_date = '2024-01-01'
    arima_order = (5, 1, 0)  # p, d, q values

    # Fetch data
    stock_data = fetch_stock_data(ticker, start_date, end_date)

    # Fit ARIMA model
    model_fit = fit_arima_model(stock_data, arima_order)

    # Forecast future prices
    forecast_steps = 30  # Predict next 30 days
    forecast = model_fit.forecast(steps=forecast_steps)

    # Extend the index for the forecasted period
    forecast_index = pd.date_range(start=stock_data.index[-1] + pd.Timedelta(days=1), periods=forecast_steps, freq='B')
    forecast_series = pd.Series(forecast, index=forecast_index)

    # Plot results
    plot_predictions(stock_data, forecast_series)

    # Optional: Print model summary and mean squared error
    print(model_fit.summary())
    mse = mean_squared_error(stock_data['Close'].iloc[-forecast_steps:], forecast)
    print(f'Mean Squared Error: {mse}')
